# -*- coding: utf-8 -*-
"""Branded_Image_Generator_App (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fSMt4WCKX87yAERqfox-0xVOxq4GiSty
"""

#!pip install -q streamlit google-generativeai

import streamlit as st
from PIL import Image
from io import BytesIO
from google import generativeai as genai

# Set your Gemini API key
genai.configure(api_key="AIzaSyA4z7iPttLbODDJn7-SdT5-KXxljF_O6Ng")

# Load the fixed Saffola packet image
with open("saffola_packet.png", "rb") as f:
    saffola_image_data = f.read()

# Streamlit UI
st.title("Branded Image Generator")
user_prompt = st.text_input("Describe your scene:", placeholder="e.g. Place the Saffola oats packet on a wooden table")

# Generate image on button click
if st.button("Generate Image"):
    system_prompt = (
    "This is the original Saffola Oats packet. Do not change, stylize, or reinterpret the packaging â€” "
    "preserve the branding, logo, shape, and color scheme exactly as shown in the reference image. "
    "The packet must always be clearly visible in the scene."
    "The packet should be visible clearly and the text on it should be preserved"
    "The text on the packet should not be distorted\n\n"
    "When generating scenes that include people, ensure correct limb and hand placement, "
    "and natural human posture. Avoid any anatomical distortions, extra limbs, or unnatural gestures.\n\n"
    "Ensure the overall scene is visually coherent, with appropriate context, lighting, and perspective. "
    "The product should feel naturally integrated into the environment described by the user."
)


    contents = [
        {"text": system_prompt + " " + user_prompt},
        {
            "inline_data": {
                "mime_type": "image/png",
                "data": saffola_image_data
            }
        }
    ]

    model = genai.GenerativeModel("gemini-2.0-flash-preview-image-generation")
    response = model.generate_content(
        contents=contents,
        generation_config={"response_modalities": ["TEXT", "IMAGE"]}
    )

    for part in response.parts:
        if hasattr(part, "inline_data") and part.inline_data:
            result_img = Image.open(BytesIO(part.inline_data.data))
            st.image(result_img, caption="Generated Image")